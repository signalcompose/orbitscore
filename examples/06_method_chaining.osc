// Method Chaining Examples - OrbitScore Audio DSL
// Demonstrates fluent API with method chaining

// Initialize global
var global = init GLOBAL
global.tempo(120).beat(4 by 4).tick(4)  // Chain global methods too!

// === Example 1: Traditional Multi-line ===
var kick_traditional = init global.seq
kick_traditional.beat(4 by 4)
kick_traditional.length(1)
kick_traditional.audio("../test-assets/audio/kick.wav")
kick_traditional.chop(1)
kick_traditional.play(1, 0, 1, 0)
// RUN(kick_traditional)  // Use reserved keyword to start

// === Example 2: Method Chaining (One-liner) ===
var kick_chained = init global.seq
kick_chained.beat(4 by 4).length(1).audio("../test-assets/audio/kick.wav").play(1, 0, 1, 0)
// RUN(kick_chained)  // Use reserved keyword to start

// === Example 3: Complex Pattern with Chaining ===
var snare = init global.seq
snare.beat(4 by 4).length(2).audio("../test-assets/audio/snare.wav").play(
  0, 0, 1, 0,           // Bar 1: backbeat
  0, 0, 1, (1, 1, 1, 1) // Bar 2: snare with roll
)
// RUN(snare)  // Use reserved keyword to start

// === Example 4: Multiple Sequences in Compact Form ===
// Create a full drum kit in just a few lines
var drums_kick = init global.seq
var drums_snare = init global.seq  
var drums_hihat = init global.seq

drums_kick.audio("../test-assets/audio/kick.wav").play(1, 0, 0, 0)
drums_snare.audio("../test-assets/audio/snare.wav").play(0, 0, 1, 0)
drums_hihat.audio("../test-assets/audio/hihat_closed.wav").play(1, 1, 1, 1)

// Start all drum sequences together
RUN(drums_kick, drums_snare, drums_hihat)

// === Example 5: Chained with Audio Processing ===
var bass = init global.seq
bass.beat(4 by 4).length(2).audio("../test-assets/audio/bass_c1.wav").chop(8).play(
  1, 0, 0, 1, 0, 0, 1, 0,
  0, 1, 0, 1, 0, 0, 0, 0
).fixpitch(7)  // Transpose up a fifth
// RUN(bass)  // Use reserved keyword to start

// === Example 6: Chained with Different Meters ===
var poly3 = init global.seq
poly3.beat(3 by 4).audio("../test-assets/audio/sine_440.wav").play(1, 1, 1)

var poly5 = init global.seq
poly5.beat(5 by 4).audio("../test-assets/audio/sine_880.wav").play(1, 0, 1, 0, 1)

// Start polymeter patterns
RUN(poly3, poly5)

// === Example 7: Live Coding Style ===
// Quick definitions for experimentation

// Instant kick pattern
var quick_kick = init global.seq
quick_kick.audio("../test-assets/audio/kick.wav").play(1, (1, 0), 1, 0)

// Quick hi-hat with variations
var quick_hat = init global.seq
quick_hat.audio("../test-assets/audio/hihat_closed.wav").play(
  (1, 1), 1, (1, 1, 1), 1
)

// Bass line with pitch variation
var quick_bass = init global.seq
quick_bass.audio("../test-assets/audio/bass_c1.wav").chop(4).play(
  1.fixpitch(0), 2.fixpitch(7), 3.fixpitch(5), 4.fixpitch(3)
)

// Start patterns with reserved keywords
// RUN(quick_kick, quick_hat, quick_bass)

// === Benefits of Method Chaining ===
// - Concise and readable
// - Less variable pollution
// - Natural flow from left to right
// - Perfect for live coding
// - Easy to modify on the fly

// === Transport Control ===
// Change tempo
global.tempo(130)

// Stop everything with reserved keyword
// LOOP()  // Stops all sequences